/**
 *DigitalNewzealandLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/22/2016
 */
/**
 * Creates a instance of ResultsCollection
 *
 * @constructor
 */

angular.module('DigitalNewzealandLib').factory('ResultsCollection',function(BaseModel){
	var ResultsCollection = function(obj) {
		if(!obj){
						this.isCommercialUse = null;     
    				this.category = null;     
    				this.contentPartner = null;     
    				this.description = null;     
    				this.additionalDescription = null;     
    				this.landingUrl = null;     
    				this.id = null;     
    				this.sourceUrl = null;     
    				this.syndicationDate = null;     
    				this.thumbnailUrl = null;     
    				this.title = null;     
    				this.geoCoOrds = null;     
    				this.largeThumbnailUrl = null;     
    				this.rightsUrl = null;     
    				this.displayDate = null;     
    				this.peerReviewed = null;     
    				this.marsdenCode = null;     
    				this.author = null;     
    				this.noLandingPage = null;     
    				this.objectUrl = null;     
    				this.publishedDate = null;     
    				this.publisher = null;     
    				this.dctype = null;     
    				this.libraryCollection = null;     
    				this.displayCollection = null;     
    				this.collectionParent = null;     
    				this.collectionRoot = null;     
    				this.date = null;     
    				this.copyright = null;     
    				this.license = null;     
    								//Append to variable dictionary
    this._variableDict['isCommercialUse'] = 'is_commercial_use';
    this._variableDict['contentPartner'] = 'content_partner';
    this._variableDict['additionalDescription'] = 'additional_description';
    this._variableDict['landingUrl'] = 'landing_url';
    this._variableDict['sourceUrl'] = 'source_url';
    this._variableDict['syndicationDate'] = 'syndication_date';
    this._variableDict['thumbnailUrl'] = 'thumbnail_url';
    this._variableDict['geoCoOrds'] = 'geo_co_ords';
    this._variableDict['largeThumbnailUrl'] = 'large_thumbnail_url';
    this._variableDict['rightsUrl'] = 'rights_url';
    this._variableDict['displayDate'] = 'display_date';
    this._variableDict['peerReviewed'] = 'peer_reviewed';
    this._variableDict['marsdenCode'] = 'marsden_code';
    this._variableDict['noLandingPage'] = 'no_landing_page';
    this._variableDict['objectUrl'] = 'object_url';
    this._variableDict['publishedDate'] = 'published_date';
    this._variableDict['libraryCollection'] = 'library_collection';
    this._variableDict['displayCollection'] = 'display_collection';
    this._variableDict['collectionParent'] = 'collection_parent';
    this._variableDict['collectionRoot'] = 'collection_root';
    					
		}
		else
		{
					this.isCommercialUse = obj.is_commercial_use;
    		this.category = obj.category;
    		this.contentPartner = obj.content_partner;
    		this.description = obj.description;
    		this.additionalDescription = obj.additional_description;
    		this.landingUrl = obj.landing_url;
    		this.id = obj.id;
    		this.sourceUrl = obj.source_url;
    		this.syndicationDate = obj.syndication_date;
    		this.thumbnailUrl = obj.thumbnail_url;
    		this.title = obj.title;
    		this.geoCoOrds = obj.geo_co_ords;
    		this.largeThumbnailUrl = obj.large_thumbnail_url;
    		this.rightsUrl = obj.rights_url;
    		this.displayDate = obj.display_date;
    		this.peerReviewed = obj.peer_reviewed;
    		this.marsdenCode = obj.marsden_code;
    		this.author = obj.author;
    		this.noLandingPage = obj.no_landing_page;
    		this.objectUrl = obj.object_url;
    		this.publishedDate = obj.published_date;
    		this.publisher = obj.publisher;
    		this.dctype = obj.dctype;
    		this.libraryCollection = obj.library_collection;
    		this.displayCollection = obj.display_collection;
    		this.collectionParent = obj.collection_parent;
    		this.collectionRoot = obj.collection_root;
    		this.date = obj.date;
    		this.copyright = obj.copyright;
    		this.license = obj.license;
    //Append to variable dictionary
    this._variableDict['isCommercialUse'] = 'is_commercial_use';
    this._variableDict['contentPartner'] = 'content_partner';
    this._variableDict['additionalDescription'] = 'additional_description';
    this._variableDict['landingUrl'] = 'landing_url';
    this._variableDict['sourceUrl'] = 'source_url';
    this._variableDict['syndicationDate'] = 'syndication_date';
    this._variableDict['thumbnailUrl'] = 'thumbnail_url';
    this._variableDict['geoCoOrds'] = 'geo_co_ords';
    this._variableDict['largeThumbnailUrl'] = 'large_thumbnail_url';
    this._variableDict['rightsUrl'] = 'rights_url';
    this._variableDict['displayDate'] = 'display_date';
    this._variableDict['peerReviewed'] = 'peer_reviewed';
    this._variableDict['marsdenCode'] = 'marsden_code';
    this._variableDict['noLandingPage'] = 'no_landing_page';
    this._variableDict['objectUrl'] = 'object_url';
    this._variableDict['publishedDate'] = 'published_date';
    this._variableDict['libraryCollection'] = 'library_collection';
    this._variableDict['displayCollection'] = 'display_collection';
    this._variableDict['collectionParent'] = 'collection_parent';
    this._variableDict['collectionRoot'] = 'collection_root';
 
		}
	}

	ResultsCollection.prototype = new BaseModel();
	ResultsCollection.prototype.constructor = ResultsCollection;

		/**
	 * this record is licensed for commercial use
	 *
	 * @return {bool}
	 */
	ResultsCollection.prototype.getIsCommercialUse = function() {
		return this.isCommercialUse;
	};

	/**
	 * Setter for IsCommercialUse
	 * 
	 * @param {bool} value 
	 */
	ResultsCollection.prototype.setIsCommercialUse = function(value) {
		this.isCommercialUse = value;
	};

		/**
	 * a string containing one or more category names separated by a comma (e.g. Images, Web pages)
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getCategory = function() {
		return this.category;
	};

	/**
	 * Setter for Category
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setCategory = function(value) {
		this.category = value;
	};

		/**
	 * the institution holding the content to which the record refers
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getContentPartner = function() {
		return this.contentPartner;
	};

	/**
	 * Setter for ContentPartner
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setContentPartner = function(value) {
		this.contentPartner = value;
	};

		/**
	 * text describing the record
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getDescription = function() {
		return this.description;
	};

	/**
	 * Setter for Description
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setDescription = function(value) {
		this.description = value;
	};

		/**
	 * additional text describing the record
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getAdditionalDescription = function() {
		return this.additionalDescription;
	};

	/**
	 * Setter for AdditionalDescription
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setAdditionalDescription = function(value) {
		this.additionalDescription = value;
	};

		/**
	 * the url for the content on the contentpartner's website. Please use the source_url when providing HTML links (see below)
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getLandingUrl = function() {
		return this.landingUrl;
	};

	/**
	 * Setter for LandingUrl
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setLandingUrl = function(value) {
		this.landingUrl = value;
	};

		/**
	 * the internal DigitalNZ identifier (used by the Get Metadata API)
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getId = function() {
		return this.id;
	};

	/**
	 * Setter for Id
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setId = function(value) {
		this.id = value;
	};

		/**
	 * the url that will redirect users to the landing_url. By using this link (as opposed to the display_url) we are able to count clickthroughs which is helpful for demonstrating the value of DigitalNZ
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getSourceUrl = function() {
		return this.sourceUrl;
	};

	/**
	 * Setter for SourceUrl
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setSourceUrl = function(value) {
		this.sourceUrl = value;
	};

		/**
	 * the date the record was added to DigitalNZ
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getSyndicationDate = function() {
		return this.syndicationDate;
	};

	/**
	 * Setter for SyndicationDate
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setSyndicationDate = function(value) {
		this.syndicationDate = value;
	};

		/**
	 * the url of for a thumbnail image of the content to which the record refers. This field may be empty.
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getThumbnailUrl = function() {
		return this.thumbnailUrl;
	};

	/**
	 * Setter for ThumbnailUrl
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setThumbnailUrl = function(value) {
		this.thumbnailUrl = value;
	};

		/**
	 * the title of the record
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getTitle = function() {
		return this.title;
	};

	/**
	 * Setter for Title
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setTitle = function(value) {
		this.title = value;
	};

		/**
	 * The latitude and longitude in the following format: namespace:lat,long; Multiple values are seperated by semi-colons, for example: namespace:lat,long;namespace:lat,long;namespace:lat,long; NOTE: namespace is optional.
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getGeoCoOrds = function() {
		return this.geoCoOrds;
	};

	/**
	 * Setter for GeoCoOrds
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setGeoCoOrds = function(value) {
		this.geoCoOrds = value;
	};

		/**
	 * a larger thumbnail image with dimensions up to 800px (NB the API Terms do not extend rights to the use of these thumbnails)
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getLargeThumbnailUrl = function() {
		return this.largeThumbnailUrl;
	};

	/**
	 * Setter for LargeThumbnailUrl
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setLargeThumbnailUrl = function(value) {
		this.largeThumbnailUrl = value;
	};

		/**
	 * the url of the object licence. This field may be empty.
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getRightsUrl = function() {
		return this.rightsUrl;
	};

	/**
	 * Setter for RightsUrl
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setRightsUrl = function(value) {
		this.rightsUrl = value;
	};

		/**
	 * string with date information in multiple, often unstructured formats (e.g. Circa 2000)
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getDisplayDate = function() {
		return this.displayDate;
	};

	/**
	 * Setter for DisplayDate
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setDisplayDate = function(value) {
		this.displayDate = value;
	};

		/**
	 * boolean, associated with research paper items. True indicates the research paper has been peer reviewed
	 *
	 * @return {bool}
	 */
	ResultsCollection.prototype.getPeerReviewed = function() {
		return this.peerReviewed;
	};

	/**
	 * Setter for PeerReviewed
	 * 
	 * @param {bool} value 
	 */
	ResultsCollection.prototype.setPeerReviewed = function(value) {
		this.peerReviewed = value;
	};

		/**
	 * a number indicating the field of research
	 *
	 * @return {int}
	 */
	ResultsCollection.prototype.getMarsdenCode = function() {
		return this.marsdenCode;
	};

	/**
	 * Setter for MarsdenCode
	 * 
	 * @param {int} value 
	 */
	ResultsCollection.prototype.setMarsdenCode = function(value) {
		this.marsdenCode = value;
	};

		/**
	 * lists the author's names
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getAuthor = function() {
		return this.author;
	};

	/**
	 * Setter for Author
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setAuthor = function(value) {
		this.author = value;
	};

		/**
	 * boolean value, if set to true it indicates the item doesn't have an external landing page, usually because it is a downloadable item such as a pdf or mpeg
	 *
	 * @return {bool}
	 */
	ResultsCollection.prototype.getNoLandingPage = function() {
		return this.noLandingPage;
	};

	/**
	 * Setter for NoLandingPage
	 * 
	 * @param {bool} value 
	 */
	ResultsCollection.prototype.setNoLandingPage = function(value) {
		this.noLandingPage = value;
	};

		/**
	 * a url pointing to a downloadable object, i.e. an image, pdf or mpeg
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getObjectUrl = function() {
		return this.objectUrl;
	};

	/**
	 * Setter for ObjectUrl
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setObjectUrl = function(value) {
		this.objectUrl = value;
	};

		/**
	 * list of dates published
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getPublishedDate = function() {
		return this.publishedDate;
	};

	/**
	 * Setter for PublishedDate
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setPublishedDate = function(value) {
		this.publishedDate = value;
	};

		/**
	 * lists the publisher's names
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getPublisher = function() {
		return this.publisher;
	};

	/**
	 * Setter for Publisher
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setPublisher = function(value) {
		this.publisher = value;
	};

		/**
	 * Dublin Core categorisation indicating type
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getDctype = function() {
		return this.dctype;
	};

	/**
	 * Setter for Dctype
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setDctype = function(value) {
		this.dctype = value;
	};

		/**
	 * the library collection the item belongs to
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getLibraryCollection = function() {
		return this.libraryCollection;
	};

	/**
	 * Setter for LibraryCollection
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setLibraryCollection = function(value) {
		this.libraryCollection = value;
	};

		/**
	 * the display collection the item belongs to
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getDisplayCollection = function() {
		return this.displayCollection;
	};

	/**
	 * Setter for DisplayCollection
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setDisplayCollection = function(value) {
		this.displayCollection = value;
	};

		/**
	 * the item's parent collection
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getCollectionParent = function() {
		return this.collectionParent;
	};

	/**
	 * Setter for CollectionParent
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setCollectionParent = function(value) {
		this.collectionParent = value;
	};

		/**
	 * the top level collection
	 *
	 * @return {string}
	 */
	ResultsCollection.prototype.getCollectionRoot = function() {
		return this.collectionRoot;
	};

	/**
	 * Setter for CollectionRoot
	 * 
	 * @param {string} value 
	 */
	ResultsCollection.prototype.setCollectionRoot = function(value) {
		this.collectionRoot = value;
	};

		/**
	 * a date associated with the record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty
	 *
	 * @return {double|null}
	 */
	ResultsCollection.prototype.getDate = function() {
		return this.date;
	};

	/**
	 * Setter for Date
	 * 
	 * @param {double|null} value 
	 */
	ResultsCollection.prototype.setDate = function(value) {
		this.date = value;
	};

		/**
	 * the copyright statement applying to the object. This field may be empty.
	 *
	 * @return {string|null}
	 */
	ResultsCollection.prototype.getCopyright = function() {
		return this.copyright;
	};

	/**
	 * Setter for Copyright
	 * 
	 * @param {string|null} value 
	 */
	ResultsCollection.prototype.setCopyright = function(value) {
		this.copyright = value;
	};

		/**
	 * the licence for the object. This field may be empty
	 *
	 * @return {string|null}
	 */
	ResultsCollection.prototype.getLicense = function() {
		return this.license;
	};

	/**
	 * Setter for License
	 * 
	 * @param {string|null} value 
	 */
	ResultsCollection.prototype.setLicense = function(value) {
		this.license = value;
	};

	
	return ResultsCollection;
});